package tableur.math;

import java.util.HashMap;

import tableur.math.formule.*;

public class Lecteur {

    final static HashMap<Character, Integer> ORDER_PRIORITY = new HashMap<Character, Integer>() {{
        put('+', 1);
        put('-', 1);
        put('*', 2);
        put('/', 2);
        put('^', 3);
    }};

    final static int MAX_ORDER = 3;
    
    private static String removeSpace(String text) {
        int n = text.length();
        int i = n-1;
        while (i >= 0) {
            if (text.charAt(i) == ' ') {
                text = text.substring(0,i).concat(text.substring(i+1, text.length()));
            }
            i--;
        }
        return text;
    }

    public static Formule convertir(String formule) {
        formule = removeSpace(formule);
        //System.out.print(formule + "\n");
        int prof = 0;
        try {
            int value = Integer.parseInt(formule);
            return new FormuleConstante(value);
        } catch (NumberFormatException e) {
            final int n = formule.length();
            
            for (int step = 1; step <= MAX_ORDER; step++) {
                for (int i = n-1; i >= 0; i--) {
                    char carac = formule.charAt(i);
                    switch (carac) {
                        case '(' :
                            prof--;
                            break;
                        case ')':
                            prof++;
                            break;
                        case '+':
                            if (prof == 0 && step == ORDER_PRIORITY.get('+')) {
                                Formule sf1 =  Lecteur.convertir(formule.substring(0, i));
                                Formule sf2 =  Lecteur.convertir(formule.substring(i+1, n));
                                return new FormuleAddition(sf1, sf2);
                            }
                            break;
                        case '-':
                            if (prof == 0 && step == ORDER_PRIORITY.get('-')) {
                                Formule sf1 =  Lecteur.convertir(formule.substring(0, i));
                                Formule sf2 =  Lecteur.convertir(formule.substring(i+1, n));
                                return new FormuleSoustraction(sf1, sf2);
                            }
                            break;
                        case '*':
                            if (prof == 0 && step == ORDER_PRIORITY.get('*')) {
                                Formule sf1 =  Lecteur.convertir(formule.substring(0, i));
                                Formule sf2 =  Lecteur.convertir(formule.substring(i+1, n));
                                return new FormuleMultiplication(sf1, sf2);
                            }
                            break;
                        case '/':
                            if (prof == 0 && step == ORDER_PRIORITY.get('/')) {
                                Formule sf1 =  Lecteur.convertir(formule.substring(0, i));
                                Formule sf2 =  Lecteur.convertir(formule.substring(i+1, n));
                                return new FormuleDivision(sf1, sf2);
                            }
                            break;
                        case '^':
                            if (prof == 0 && step == ORDER_PRIORITY.get('^')) {
                                Formule sf1 =  Lecteur.convertir(formule.substring(0, i));
                                Formule sf2 =  Lecteur.convertir(formule.substring(i+1, n));
                                return new FormulePuissance(sf1, sf2);
                            }
                            break;
                        default:
                            break;
                    }
                    
                }
                //if ( prof < 0 ) {
                //        throw new IllegalArgumentException("Missmatch of \'(\' or \')\':");
                //    }
            }
            if (n >= 2) {
                if (formule.charAt(0) == '(' && formule.charAt(n-1) == ')') {
                    Formule sf = Lecteur.convertir(formule.substring(1, n-1));
                    return new FormuleParenthese(sf);
                }
                if (formule.charAt(0) == '[' && formule.charAt(n-1) == ']') {
                    String[] cell = formule.substring(1, n-1).split(":");
                    if (cell.length != 2) {
                        throw new IllegalArgumentException("Format cellule invalide");
                    }
                    int c1 = Integer.parseInt(cell[0]);
                    int c2 = Integer.parseInt(cell[1]);

                    return new FormuleCellule(c1,c2);
                }
            }
            throw new IllegalArgumentException("Format formule error :" + formule);
        }
    }
}
