package tableur;

import java.util.Observable;
import java.util.Observer;
//import java.util.*;

import java.awt.*;

import javax.swing.*;
import javax.swing.plaf.DimensionUIResource;

public class TableurVisuel extends JFrame implements Observer {

    private Tableur tab;
    private Container content;

    private JMenuBar menuBar = new JMenuBar();

    public TableurVisuel( String name,  Tableur tab) {
        super(name);
        this.tab = tab;
        tab.addObserver(this);
        this.content = this.getContentPane();
        setupJFrame();
    }


    private void setupJFrame() {

        this.setLocation(100, 100);
        
        DimensionUIResource dim = new DimensionUIResource(100, 100);

        this.setMinimumSize(dim);
        this.setVisible(true);
        this.pack();
        this.setSize(1920, 1080);

        this.setJMenuBar(menuBar);

        JMenu menuFichier = new JMenu("Fichier");
        JMenu menuEditer = new JMenu("Editer");
        JMenu menuOption = new JMenu("Option");

        menuFichier.add(new JMenuItem("Nouveau"));
        menuFichier.add(new JMenuItem("Ouvrir"));
        menuFichier.add(new JMenuItem("Enregistrer"));
        menuFichier.add(new JMenuItem("Enregistrer Sous"));

        menuEditer.add(new JMenuItem("Annuler"));
        menuEditer.add(new JMenuItem("Retablir"));
        menuEditer.add(new JMenuItem("Copier"));
        menuEditer.add(new JMenuItem("Couper"));
        menuEditer.add(new JMenuItem("Coller"));
        menuEditer.add(new JMenuItem("RAZ"));
        

        menuOption.add(new JMenuItem("Apparence"));
        menuOption.add(new JMenuItem("Format"));
        menuOption.add(new JMenuItem("Dimensions"));

        


        menuBar.add(menuFichier);
        menuBar.add(menuEditer);
        menuBar.add(menuOption);

        content.setLayout(new GridLayout(tab.HEIGTH,tab.WIDHT));

        JTextField test;

        for (int i = 0; i<tab.HEIGTH; i ++) {
            for (int j = 0; j<tab.WIDHT; j ++) {
                content.add(new JTextField());
            }
        }
    }


    @Override
    public void update(Observable o, Object arg) {
        
        
    }
}
