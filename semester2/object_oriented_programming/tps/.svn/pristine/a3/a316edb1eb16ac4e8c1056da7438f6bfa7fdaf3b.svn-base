import java.awt.Color;

/** Cercle modélise un cercle géométrique dans un plan équipé d'un
 * repère cartésien.  Un Cercle peut être affiché et translaté.
 * Il est possible de déterminer si un point se trouve à l'intérieur 
 * du cercle ou non.
 *
 * @author  Léo Meissner <leo.meissner@etu.toulouse-inp.fr>
 */
public class Cercle {
	private double r;		// rayon
	private Point centre;		// centre du cercle
	private Color couleur;	// couleur du cercle

	/** Construire un cercle bleu à partir de son centre et de son rayon.
	 * @param vr rayon
	 * @param vcentre centre du cercle
	 */
	public Cercle(Point vcentre, double vr) {
		this.r = vr;
		this.centre = vcentre;
		this.couleur = Color.blue;
		this.centre.setCouleur(Color.blue);
	}
	
	/** Construire un cercle bleu à partir de 2 point
	 *  diamétralement opposés
	 * @param p1 point numéro 1
	 * @param p2 point numéro 2
	 */
	public Cercle(Point p1, Point p2) {
		this.r = p1.distance(p2)/2.0;
		Point vcentre = new Point((p1.getX()+p2.getX())/2.0 , (p1.getY()+p2.getY())/2.0);
		this.centre = vcentre;
		this.couleur = Color.blue;
		this.centre.setCouleur(Color.blue);
	}
	
	/** Construire un cercle à partir de 2 point
	 *  diamétralement opposés et de sa couleur
	 * @param p1 point numéro 1
	 * @param p2 point numéro 2
	 * @param couleur Couleur du cercle
	 */
	public Cercle(Point p1, Point p2, Color couleur) {
		this(p1,p2);
		this.couleur = couleur;
		this.centre.setCouleur(couleur);
	}

	/** Obtenir le rayon du cercle.
	 * @return rayon du cercle
	 */
	public double getRayon() {
		return this.r;
	}

	/** Obtenir le centre du cercle.
	 * @return centre du cercle
	 */
	public Point getCentre() {
		return this.centre;
	}
	
	/** Obtenir le diametre du cercle.
	 * @return diametre du cercle
	 */
	public double getDiametre() {
		return 2.0*this.r;
	}

	/** Changer le rayon du cercle.
	  * @param vr nouveau rayon
	  */
	public void setRayon(double vr) {
		this.r = vr;
	}

	/** Changer le centre du cercle.
	  * @param vcentre nouveau centre
	  */
	public void setCentre(Point vcentre) {
		this.centre = vcentre;
	}
	
	/** Changer le diametre du cercle.
	  * @param vdiametre nouveau diametre
	  */
	public void setDiametre(double vdiametre) {
		this.r = vdiametre/2.0;
	}

	public String toString() {
		return "C" + this.r + "@" + this.centre;
	}

	/** Afficher le point. */
	public void afficher() {
		System.out.print(this);
	}

   /** Translater le cercle.
	* @param dx déplacement suivant l'axe des X
	* @param dy déplacement suivant l'axe des Y
	*/
	public void translater(double dx, double dy) {
		this.centre.translater(dx, dy);
	}
	
	/** Methode permettant de verifier si un point est interieur
	* (au sens large) ou exterieur au cercle
	* @param p Point 
	*/
	public boolean contient(Point p) {
		return (this.centre.distance(p) <= this.r);
	}
	
	/** Calcul du perimetre du cercle
	*/
	public double perimetre() {
		return 2*3.1415*this.r;
	}
	
	/** Calcul de l'aire du cercle
	*/
	public double aire() {
		return 3.1415*this.r*this.r;
	}
	
	/** Creer un cercle a partir de son centre et 
	* d'un point se trouvant sur sa circonference.
	* @param vcentre centre du cercle
	* @param p point appartenant a la circonference du cercle
	*/
	public static Cercle creerCercle(Point vcentre, Point p) {
		return new Cercle(vcentre, vcentre.distance(p));
	}

//  Gestion de la couleur

	/** Obtenir la couleur du cercle.
	 * @return la couleur du cercle
	 */
	public Color getCouleur() {
		return this.couleur;
	}

	/** Changer la couleur du cercle.
	  * @param nouvelleCouleur nouvelle couleur
	  */
	public void setCouleur(Color nouvelleCouleur) {
		this.couleur = nouvelleCouleur;
		this.centre.setCouleur(nouvelleCouleur);
	}

}