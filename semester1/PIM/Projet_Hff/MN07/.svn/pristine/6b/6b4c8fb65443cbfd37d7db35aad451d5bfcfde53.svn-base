with Arbre_Exceptions;         use Arbre_Exceptions;
with Ada.Unchecked_Deallocation;

package body arbre_bin_projet is

	procedure Free is
		new Ada.Unchecked_Deallocation (Object => T_Noeud, Name => T_ABR);


	procedure Initialiser(Arbre: out T_ABR) is
	begin
		Arbre := null;
	end Initialiser;


	function Est_Vide (Arbre : T_ABR) return Boolean is
	begin
		return Arbre = null;
	end Est_Vide;



	procedure Enregistrer_noeud (Arbre : in out T_ABR ; Valeur : in Integer ; Donnee : in T_Donnee) is
	begin

		Arbre.all.Valeur := Valeur;
		Arbre.all.Donnee := Donnee;

	end Enregistrer;


	procedure Vider (Arbre : in out T_Abr) is
	begin
		if Arbre = null then
			Free(Arbre);

		else
			Vider(Arbre.all.Sous_Arbre_Gauche);
			Vider(Arbre.all.Sous_Arbre_Droit);
			Free(Arbre);

		end if;
	end Vider;
	

	procedure Droite(Arbre : in out T_Abr)
	begin 
		Arbre := Arbre.all.Sous_Arbre_Droit;
	end Droite;


	procedure Gauche(Arbre : in out T_Abr)
	begin
		Arbre := Arbre.all.Sous_Arbre_Gauche;
		
	end Gauche;


	procedure Fusionner(Arbre_g : in out T_abr, Arbre_d : in)
	begin
		Arbre_g.all.Sous_Arbre_Gauche := Arbre_g
		Arbre_g.all.Sous_Arbre_Droite := Arbre_d


	function Donnee (Arbre : in T_Abr) return T_Donnee;
	begin
	return Arbre.all.Donnnee;


	procedure Pour_Chaque (Arbre : in T_Abr) is
	begin
		if Arbre = null then
			null;
		else
			begin
				Traiter(Arbre.all.Valeur, Arbre.all.Donnee);
				Pour_Chaque(Arbre.all.Sous_Arbre_Gauche);
				Traiter(Arbre.all.Valeur, Arbre.all.Donnee);
				Pour_Chaque(Arbre.all.Sous_Arbre_Droit);
			exception
				when others => 
					Pour_Chaque(Arbre.all.Sous_Arbre_Gauche);
					Pour_Chaque(Arbre.all.Sous_Arbre_Droit);
			end;
		end if;
	end Pour_Chaque;


end ABR;
