
-- DÉfinition de structures de donnÉes associatives sous forme d'un arbre
-- binaire de recherche (ABR).
generic
	type T_Donnee is private;
	-- with function "<" (Gauche, Droite : in T_Valeur) return Boolean;

package arbre_bin_projet is

	type T_Abr is limited private;

	-- Initialiser une Arbre.  La Arbre est vide.
	procedure Initialiser(Arbre: out T_Abr) with
		Post => Est_Vide (Arbre);


	-- Est-ce qu'une Arbre est vide ?
	function Est_Vide (Arbre : T_Abr) return Boolean;


	-- Enregistrer une Donnée associÉe à une Clé dans une Arbre.
	-- Si la clÉ est déjà présente dans la Arbre, sa donnÉe est changée.
	procedure Enregistrer_noeud (Arbre : in out T_Abr ; Valeur : in Integer ; Donnee : in T_Donnee) 
		


	-- Supprimer tous les ÉlÉments d'une Arbre.
	procedure Vider (Arbre : in out T_Abr) with
		Post => Est_Vide (Arbre);

	function Droite(Arbre : in T_Abr) return T_Abr

	
	function Gauche(Arbre : in T_Abr) return T_Abr

			
	procedure Fusionner(Arbre_1 : in out T_abre, Arbre_2 : in)
			

	function Donnee (Arbre : in T_Abr) return T_Donnee;

	function Valeur(Arbre : in T_Abr) return Integer;
		
			

	generic
		with procedure Traiter (Valeur : in Integer; Donnee: in T_Donnee);
	procedure Pour_Chaque (Arbre : in T_Abr);


private

	type T_Noeud;
	type T_Abr is access T_Noeud;
	type T_Noeud is
		record
			Valeur : Integer;
			Donnee : T_donne;
			Sous_Arbre_Gauche : T_Abr;
			Sous_Arbre_Droit : T_Abr;

		end record;

end arbre_bin_projet;
